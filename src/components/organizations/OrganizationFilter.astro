---
import { FaFilter } from 'react-icons/fa';

interface Props {
  showRegions?: boolean;
  showTypes?: boolean;
  showYears?: boolean;
  showSort?: boolean;
  organizations: any[];
}

const { 
  showRegions = true, 
  showTypes = true, 
  showYears = true, 
  showSort = true,
  organizations
} = Astro.props;

// Options de filtrage
const expertiseOptions = [
  "Observation Électorale",
  "Transparence",
  "Formation Civique",
  "Monitoring Électoral",
  "Analyse Politique",
  "Éducation Civique",
  "Droits Humains",
  "Médias",
  "Technologie Électorale"
];

// Extraire les régions uniques en gérant les tableaux et valeurs nulles
const regions = [...new Set(
  organizations.flatMap(org => {
    if (Array.isArray(org.zone)) {
      return org.zone.filter(z => z && z !== null && z !== "");
    } else if (org.zone && org.zone !== null && org.zone !== "") {
      return [org.zone];
    }
    return [];
  })
)].sort();

import { FaGlobe, FaHandshake, FaUniversity, FaUsers, FaLandmark, FaNetworkWired } from 'react-icons/fa';

const typeOptions = [
  { label: "ONG", icon: FaGlobe },
  { label: "Organisation internationale", icon: FaGlobe },
  { label: "Institution gouvernementale", icon: FaLandmark },
  { label: "Réseau régional", icon: FaNetworkWired },
  { label: "Centre de recherche", icon: FaUniversity }
];

const sortOptions = [
  { label: "Alphabétique (A-Z)", value: "alpha-asc" },
  { label: "Alphabétique (Z-A)", value: "alpha-desc" },
  { label: "Plus récentes", value: "date-desc" },
  { label: "Plus anciennes", value: "date-asc" }
];
---

<div class="bg-white rounded-lg shadow-md p-6 sticky top-24">
  <div class="flex items-center mb-6">
    <FaFilter className="text-farafina-primary mr-2" />
    <h2 class="text-xl font-bold text-farafina-dark">Filtres</h2>
  </div>

  <div class="space-y-6">
    <!-- Domaines d'expertise -->
    <div>
      <h3 class="font-semibold mb-3 text-farafina-secondary">Domaines d'expertise</h3>
      <div class="space-y-2 max-h-48 overflow-y-auto pr-2">
        {expertiseOptions.map(option => (
          <label class="flex items-center">
            <input 
              type="checkbox" 
              class="form-checkbox rounded text-farafina-primary focus:ring-farafina-primary expertise-filter" 
              data-value={option}
            />
            <span class="ml-2 text-gray-700 text-sm">{option}</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Régions -->
    {showRegions && (
      <div>
        <h3 class="font-semibold mb-3 text-farafina-secondary">Régions</h3>
        <div class="space-y-2">
          {regions.map(option => (
            <label class="flex items-center">
              <input 
                type="checkbox" 
                class="form-checkbox rounded text-farafina-primary focus:ring-farafina-primary region-filter" 
                data-value={option}
              />
              <span class="ml-2 text-gray-700 text-sm">{option}</span>
            </label>
          ))}
        </div>
      </div>
    )}

    <!-- Types d'organisations -->
    {showTypes && (
      <div>
        <h3 class="font-semibold mb-3 text-farafina-secondary">Types d'organisations</h3>
        <div class="space-y-2">
          {typeOptions.map(option => (
            <label class="flex items-center">
              <input 
                type="checkbox" 
                class="form-checkbox rounded text-farafina-primary focus:ring-farafina-primary type-filter" 
                data-value={option.label}
              />
              <span class="ml-2 text-gray-700 text-sm">{option.label}</span>
            </label>
          ))}
        </div>
      </div>
    )}

    <!-- Année de création -->
    {showYears && (
      <div>
        <h3 class="font-semibold mb-3 text-farafina-secondary">Année de création</h3>
        <div class="flex items-center space-x-4">
          <div>
            <label class="block text-xs text-gray-600 mb-1">De</label>
            <input 
              type="number" 
              min="1950" 
              max="2023" 
              value="2000" 
              class="w-24 px-2 py-1 border rounded-md focus:ring-1 focus:ring-farafina-primary focus:border-farafina-primary text-sm"
            />
          </div>
          <div>
            <label class="block text-xs text-gray-600 mb-1">À</label>
            <input 
              type="number" 
              min="1950" 
              max="2023" 
              value="2023" 
              class="w-24 px-2 py-1 border rounded-md focus:ring-1 focus:ring-farafina-primary focus:border-farafina-primary text-sm"
            />
          </div>
        </div>
      </div>
    )}

    <!-- Tri -->
    {showSort && (
      <div>
        <h3 class="font-semibold mb-3 text-farafina-secondary">Trier par</h3>
        <select class="w-full px-3 py-2 border rounded-md focus:ring-1 focus:ring-farafina-primary focus:border-farafina-primary text-sm">
          {sortOptions.map(option => (
            <option value={option.value}>{option.label}</option>
          ))}
        </select>
      </div>
    )}

    <!-- Boutons d'action -->
    <div class="pt-4 border-t border-gray-200 flex flex-col space-y-3">
      <button id="apply-filters" class="w-full py-2 bg-farafina-primary text-white rounded-lg hover:bg-farafina-primary/90 transition-colors">
        Appliquer les filtres
      </button>
      <button id="reset-filters" class="w-full py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
        Réinitialiser
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const expertiseFilters = document.querySelectorAll('.expertise-filter');
    const regionFilters = document.querySelectorAll('.region-filter');
    const typeFilters = document.querySelectorAll('.type-filter');
    const applyButton = document.getElementById('apply-filters');
    const resetButton = document.getElementById('reset-filters');

    function applyFilters() {
      const selectedExpertise = Array.from(expertiseFilters)
        .filter(checkbox => checkbox.checked)
        .map(checkbox => checkbox.dataset.value);

      const selectedRegions = Array.from(regionFilters)
        .filter(checkbox => checkbox.checked)
        .map(checkbox => checkbox.dataset.value);

      const selectedTypes = Array.from(typeFilters)
        .filter(checkbox => checkbox.checked)
        .map(checkbox => checkbox.dataset.value);

      // Dispatch custom event pour la page organisations
      const event = new CustomEvent('organizationFilter', {
        detail: { 
          expertise: selectedExpertise,
          regions: selectedRegions,
          types: selectedTypes
        }
      });
      window.dispatchEvent(event);
    }

    function resetFilters() {
      const checkboxes = document.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(checkbox => {
        checkbox.checked = false;
      });

      // Apply empty filters
      const event = new CustomEvent('organizationFilter', {
        detail: { 
          expertise: [],
          regions: [],
          types: []
        }
      });
      window.dispatchEvent(event);
    }

    // Auto-apply filters when checkboxes change
    [...expertiseFilters, ...regionFilters, ...typeFilters].forEach(checkbox => {
      checkbox.addEventListener('change', applyFilters);
    });

    applyButton?.addEventListener('click', applyFilters);
    resetButton?.addEventListener('click', resetFilters);
  });

  // Fonction pour filtrer les organisations
  function filterOrganizations() {
    const selectedTypes = Array.from(document.querySelectorAll('input[name="organizationType"]:checked'))
      .map(input => input.value);

    const selectedDomains = Array.from(document.querySelectorAll('input[name="expertiseDomain"]:checked'))
      .map(input => input.value);

    const selectedRegions = Array.from(document.querySelectorAll('input[name="region"]:checked'))
      .map(input => input.value);

    const filteredOrgs = organizations.filter(org => {
      // Filtre par type
      const typeMatch = selectedTypes.length === 0 || selectedTypes.includes(org.typeOrganisation);

      // Filtre par domaine d'expertise
      const domaineMatch = selectedDomains.length === 0 || 
        selectedDomains.some(domain => 
          org.domainesExpertise && org.domainesExpertise.includes(domain)
        );

      // Filtre par région - gérer les tableaux et valeurs nulles
      const regionMatch = selectedRegions.length === 0 || (() => {
        if (Array.isArray(org.zone)) {
          return org.zone.some(z => selectedRegions.includes(z));
        } else if (org.zone && org.zone !== null && org.zone !== "") {
          return selectedRegions.includes(org.zone);
        }
        return false;
      })();

      return typeMatch && domaineMatch && regionMatch;
    });

    // Dispatch l'événement avec les organisations filtrées
    window.dispatchEvent(new CustomEvent('organizationsFiltered', {
      detail: filteredOrgs
    }));
  }
</script>