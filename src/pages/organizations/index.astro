---
import Layout from '../../layouts/MainLayout.astro';
import OrganizationsHero from '../../components/organizations/OrganizationsHero.astro';
import OrganizationCard from '../../components/organizations/OrganizationCard.astro';
import OrganizationFilter from '../../components/organizations/OrganizationFilter.astro';
import PartnershipTypes from '../../components/organizations/PartnershipTypes.astro';
import ObserverNetworks from '../../components/organizations/ObserverNetworks.astro';
import { FaUsers, FaHandshake, FaGlobeAfrica, FaChartBar } from 'react-icons/fa';
import { getCollection } from 'astro:content';

// Récupération des données depuis NocoDB
const organisations = await getCollection('organisations');
const pays = await getCollection('pays');
const elections = await getCollection('elections');



// Transformation des données pour les cartes
const organizationsData = organisations.map(org => ({
  id: org.id,
  originalId: org.data.originalId,
  name: org.data.nom,
  country: org.data.pays || 'Non spécifié',
  type: org.data.typeOrganisation || 'Organisation',
  zone: org.data.zone, // Champ zone pour le filtrage
  expertise: org.data.domainesExpertise ? org.data.domainesExpertise.split(',').map(d => d.trim()).filter(d => d) : [],
  logo: null, // Pas de logo dans les données NocoDB
  website: org.data.siteweb || '',
  description: `${org.data.typeOrganisation} basée à ${org.data.ville || 'localisation non spécifiée'}, couvrant ${org.data.nombreDePaysCouverts || '1'} pays dans les zones: ${org.data.zonesCouverts || 'Non spécifié'}.`,
  contacts: {
    email: org.data.email || '',
    phone: org.data.telephone || '',
    address: `${org.data.ville || ''}, ${org.data.pays || ''}`
  }
}));

// Calcul des statistiques basées sur les données réelles
const stats = [
  { 
    icon: FaUsers, 
    value: organisations.length.toString(), 
    label: "Organisations Partenaires",
    color: "bg-farafina-primary/10",
    textColor: "text-farafina-primary"
  },
  { 
    icon: FaHandshake, 
    value: pays.length.toString(), 
    label: "Pays Représentés",
    color: "bg-farafina-secondary/10",
    textColor: "text-farafina-secondary"
  },
  { 
    icon: FaGlobeAfrica, 
    value: "5", 
    label: "Réseaux Régionaux",
    color: "bg-farafina-accent/10",
    textColor: "text-farafina-accent"
  },
  { 
    icon: FaChartBar, 
    value: elections.length.toString(), 
    label: "Élections Observées",
    color: "bg-farafina-blue/10",
    textColor: "text-farafina-blue"
  }
];

// Toutes les organisations
const allOrganizations = organizationsData;

// Calcul des types d'organisations pour les statistiques
const organisationTypes = organisations.reduce((acc, org) => {
  const type = org.data.typeOrganisation || 'Autre';
  acc[type] = (acc[type] || 0) + 1;
  return acc;
}, {} as Record<string, number>);

// Calcul des zones géographiques couvertes
const zonesCouvertes = new Set();
organisations.forEach(org => {
  if (org.data.zonesCouverts) {
    org.data.zonesCouverts.split(',').forEach(zone => {
      zonesCouvertes.add(zone.trim());
    });
  }
});

// Regrouper les organisations par région
const regions = [
  {
    name: "Afrique du Nord",
    key: "Nord",
    count: organisations.filter(org => {
      const zone = org.data.zone;
      if (Array.isArray(zone)) {
        return zone.some(z => z && z.toLowerCase().includes('nord'));
      }
      return zone && zone.toLowerCase().includes('nord');
    }).length,
  },
  {
    name: "Afrique de l'Ouest",
    key: "Ouest", 
    count: organisations.filter(org => {
      const zone = org.data.zone;
      if (Array.isArray(zone)) {
        return zone.some(z => z && z.toLowerCase().includes('ouest'));
      }
      return zone && zone.toLowerCase().includes('ouest');
    }).length,
  },
  {
    name: "Afrique Centrale",
    key: "Centrale",
    count: organisations.filter(org => {
      const zone = org.data.zone;
      if (Array.isArray(zone)) {
        return zone.some(z => z && z.toLowerCase().includes('central'));
      }
      return zone && zone.toLowerCase().includes('central');
    }).length,
  },
  {
    name: "Afrique de l'Est",
    key: "Est",
    count: organisations.filter(org => {
      const zone = org.data.zone;
      if (Array.isArray(zone)) {
        return zone.some(z => z && z.toLowerCase().includes('est'));
      }
      return zone && zone.toLowerCase().includes('est');
    }).length,
  },
  {
    name: "Afrique Australe", 
    key: "Australe",
    count: organisations.filter(org => {
      const zone = org.data.zone;
      if (Array.isArray(zone)) {
        return zone.some(z => z && z.toLowerCase().includes('austral'));
      }
      return zone && zone.toLowerCase().includes('austral');
    }).length,
  },
];
---

<Layout title="Acteurs Clés | Observatoire des Élections en Afrique">
  <OrganizationsHero organizations={organizationsData} />

  <div class="container mx-auto px-4 py-12">
    <!-- Statistiques -->
    <div class="bg-white rounded-xl shadow-md p-6 mb-12">
      <h2 class="text-2xl font-bold text-farafina-dark mb-6">Notre Réseau</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map(stat => (
          <div class={`${stat.color} rounded-lg p-5 text-center`}>
            <div class="flex justify-center mb-3">
              <stat.icon className={`${stat.textColor} text-3xl`} />
            </div>
            <span class={`block text-3xl font-bold ${stat.textColor}`}>{stat.value}</span>
            <span class="text-gray-600">{stat.label}</span>
          </div>
        ))}
      </div>
    </div>

    <!-- Aperçu des types d'organisations -->
    <div class="bg-white rounded-xl shadow-md p-6 mb-12">
      <h2 class="text-2xl font-bold text-farafina-dark mb-6">Types d'Organisations</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {Object.entries(organisationTypes).map(([type, count]) => (
          <div class="bg-farafina-primary/5 rounded-lg p-4">
            <h3 class="font-semibold text-farafina-dark">{type}</h3>
            <p class="text-2xl font-bold text-farafina-primary">{count}</p>
            <p class="text-sm text-gray-600">organisations</p>
          </div>
        ))}
      </div>
    </div>

    <!-- Organisations par région -->
    <div class="bg-white rounded-xl shadow-md p-6 mb-12">
      <h2 class="text-2xl font-bold text-farafina-dark mb-6">Organisations par Région</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
        {regions.map(region => (
          <div class="bg-farafina-secondary/5 rounded-lg p-4 text-center">
            <h3 class="font-semibold text-farafina-dark mb-2">{region.name}</h3>
            <p class="text-3xl font-bold text-farafina-secondary">{region.count}</p>
            <p class="text-sm text-gray-600">organisations</p>
          </div>
        ))}
      </div>
    </div>

    <!-- Types de partenariats >
    <PartnershipTypes /-->

    <!-- Initiatives et Programmes >
    <div class="my-12">
      <div class="bg-white rounded-xl shadow-md p-6">
        <h2 class="text-2xl font-bold text-farafina-dark mb-6">Initiatives et Programmes Phares</h2>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <div class="bg-gradient-to-br from-farafina-primary/10 to-farafina-primary/5 rounded-lg p-6">
            <div class="w-12 h-12 bg-farafina-primary/20 rounded-lg flex items-center justify-center mb-4">
              <FaChartBar className="text-farafina-primary text-xl" />
            </div>
            <h3 class="font-semibold text-farafina-dark mb-3">Observatoire Electoral</h3>
            <p class="text-gray-600 text-sm mb-4">Surveillance et analyse en temps réel des processus électoraux africains</p>
            <div class="text-2xl font-bold text-farafina-primary">{elections.length}</div>
            <div class="text-xs text-gray-600">Élections suivies</div>
          </div>

          <div class="bg-gradient-to-br from-farafina-secondary/10 to-farafina-secondary/5 rounded-lg p-6">
            <div class="w-12 h-12 bg-farafina-secondary/20 rounded-lg flex items-center justify-center mb-4">
              <FaUsers className="text-farafina-secondary text-xl" />
            </div>
            <h3 class="font-semibold text-farafina-dark mb-3">Réseau de Formation</h3>
            <p class="text-gray-600 text-sm mb-4">Renforcement des capacités des acteurs de la société civile</p>
            <div class="text-2xl font-bold text-farafina-secondary">15+</div>
            <div class="text-xs text-gray-600">Programmes actifs</div>
          </div>

          <div class="bg-gradient-to-br from-farafina-accent/10 to-farafina-accent/5 rounded-lg p-6">
            <div class="w-12 h-12 bg-farafina-accent/20 rounded-lg flex items-center justify-center mb-4">
              <FaGlobeAfrica className="text-farafina-accent text-xl" />
            </div>
            <h3 class="font-semibold text-farafina-dark mb-3">Plaidoyer Régional</h3>
            <p class="text-gray-600 text-sm mb-4">Promotion de la démocratie et de la transparence électorale</p>
            <div class="text-2xl font-bold text-farafina-accent">{Array.from(zonesCouvertes).length}</div>
            <div class="text-xs text-gray-600">Zones d'intervention</div>
          </div>
        </div>

        <div class="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="border border-gray-200 rounded-lg p-5">
            <h4 class="font-semibold text-farafina-dark mb-3">Programme de Mentorat</h4>
            <p class="text-gray-600 text-sm mb-4">Accompagnement des jeunes organisations dans le développement de leurs capacités d'observation électorale.</p>
            <div class="flex items-center text-sm text-farafina-primary">
              <FaHandshake className="mr-2" />
              <span>25 organisations mentorées en 2024</span>
            </div>
          </div>

          <div class="border border-gray-200 rounded-lg p-5">
            <h4 class="font-semibold text-farafina-dark mb-3">Base de Données Partagée</h4>
            <p class="text-gray-600 text-sm mb-4">Plateforme collaborative pour le partage d'informations et de bonnes pratiques entre organisations.</p>
            <div class="flex items-center text-sm text-farafina-secondary">
              <FaChartBar className="mr-2" />
              <span>Plus de 500 ressources disponibles</span>
            </div>
          </div>
        </div>
      </div>
    </div-->

    <!-- Acteurs clés et filtres -->
    <div id="acteurs-cles-section" class="mb-12">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        <!-- Filtres -->
        <div class="lg:col-span-1">
          <OrganizationFilter />
        </div>

        <!-- Liste des organisations -->
        <div class="lg:col-span-3">
          <div class="bg-white rounded-xl shadow-md p-6 mb-6">
            <div class="flex justify-between items-center mb-6">
              <h3 class="text-xl font-semibold text-farafina-dark">Tous les Acteurs Clés</h3>
              <div class="text-sm text-gray-600" id="organization-count">
                Affichage de {allOrganizations.length} organisations
              </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6" id="organizations-list">
              {allOrganizations.map(org => (
                <div data-org-id={org.id}>
                  <OrganizationCard organization={org} />
                </div>
              ))}
            </div>

            <!-- Message si aucun résultat -->
            <div id="no-results" class="text-center py-8 hidden">
              <p class="text-gray-500">Aucune organisation trouvée pour cette recherche.</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Appel à l'action -->
    <div class="bg-gradient-to-r from-farafina-primary to-farafina-secondary rounded-xl shadow-md overflow-hidden">
      <div class="grid grid-cols-1 md:grid-cols-2">
        <div class="p-8 text-white">
          <h2 class="text-2xl font-bold mb-4">Rejoignez notre réseau</h2>
          <p class="mb-6 text-white/90">
            Votre organisation travaille dans le domaine de l'observation électorale ou de la promotion de la démocratie ? Rejoignez notre réseau de partenaires pour contribuer à la transparence des processus électoraux en Afrique.
          </p>
          <a 
            href="/contact" 
            class="inline-block px-6 py-3 bg-white text-farafina-primary font-medium rounded-lg hover:bg-white/90 transition-colors"
          >
            Devenir partenaire
          </a>
        </div>
        <div class="hidden md:block relative">
          <img 
            src="https://images.unsplash.com/photo-1651372381086-9861c9c81db5?q=80&w=3270&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" 
            alt="Collaboration entre organisations" 
            class="w-full h-full object-cover"
          />
          <div class="absolute inset-0 bg-black/20"></div>
        </div>
      </div>
    </div>
  </div>

  <script is:inline define:vars={{ allOrganizations: organizationsData }}>
    document.addEventListener('DOMContentLoaded', function() {
      const organizationsList = document.getElementById('organizations-list');
      const organizationCount = document.getElementById('organization-count');
      const noResults = document.getElementById('no-results');
      
      let currentFilters = {
        expertise: [],
        regions: [],
        types: [],
        searchTerm: '',
        exactMatch: false
      };

      // Fonction pour afficher le statut de chargement des types
      function showTypeLoadingStatus() {
        console.log('Status: Types d\'organisations chargés');
        console.log('Types disponibles:', Object.keys(organisationTypes));
      }

    

      // Fonction pour appliquer tous les filtres
      function applyAllFilters() {
        let filteredOrgs = allOrganizations.slice(); // Copy array

        // Filtre par recherche
        if (currentFilters.searchTerm) {
          filteredOrgs = filteredOrgs.filter(org => 
            org.name.toLowerCase().includes(currentFilters.searchTerm) ||
            org.country.toLowerCase().includes(currentFilters.searchTerm) ||
            org.type.toLowerCase().includes(currentFilters.searchTerm) ||
            (org.expertise && org.expertise.some(exp => 
              exp.toLowerCase().includes(currentFilters.searchTerm)
            ))
          );
        }


        // Filtre par domaines d'expertise
        if (currentFilters.expertise.length > 0) {
          filteredOrgs = filteredOrgs.filter(org => {
            if (!org.expertise || org.expertise.length === 0) return false;
            
            return currentFilters.expertise.some(filterExpertise => {
              return org.expertise.some(orgExp => {
                const orgExpLower = orgExp.toLowerCase().trim();
                const filterExpLower = filterExpertise.toLowerCase().trim();
                // Correspondance exacte ou contient
                return orgExpLower === filterExpLower || orgExpLower.includes(filterExpLower);
              });
            });
          });
        }

        // Filtre par type d'organisation (correspondance exacte)
        if (currentFilters.types.length > 0) {
          filteredOrgs = filteredOrgs.filter(org => {
            const orgTypeLower = org.type.toLowerCase().trim();
            return currentFilters.types.some(filterType => {
              const filterTypeLower = filterType.toLowerCase().trim();
              // Correspondance exacte
              const matches = orgTypeLower === filterTypeLower;
              return matches;
            });
          });
        }

        // Filtre par région (basé sur le champ zone de NocoDB)
        if (currentFilters.regions.length > 0) {
          filteredOrgs = filteredOrgs.filter(org => {
            if (!org.zone) return false;
            
            return currentFilters.regions.some(region => {
              const regionKeywords = {
                'Afrique du Nord': ['nord'],
                'Afrique de l\'Ouest': ['ouest'],
                'Afrique Centrale': ['centrale', 'central'],
                'Afrique de l\'Est': ['est'],
                'Afrique Australe': ['australe', 'sud']
              };
              
              const keywords = regionKeywords[region] || [];
              const zone = org.zone;
              
              if (Array.isArray(zone)) {
                return zone.some(z => {
                  if (!z) return false;
                  const zoneText = z.toLowerCase().trim();
                  
                  return keywords.some(keyword => {
                    const keywordLower = keyword.toLowerCase();
                    
                    // Correspondance exacte de mots entiers uniquement
                    const wordBoundaryPattern = new RegExp(`\\b${keywordLower}\\b`, 'i');
                    return wordBoundaryPattern.test(zoneText) || zoneText === keywordLower;
                  });
                });
              }
              
              if (typeof zone === 'string') {
                const zoneText = zone.toLowerCase().trim();
                
                return keywords.some(keyword => {
                  const keywordLower = keyword.toLowerCase();
                  
                  // Correspondance exacte de mots entiers uniquement
                  const wordBoundaryPattern = new RegExp(`\\b${keywordLower}\\b`, 'i');
                  return wordBoundaryPattern.test(zoneText) || zoneText === keywordLower;
                });
              }
              
              return false;
            });
          });
        }
        showOrganizations(filteredOrgs);
      }

      // Écouter l'événement de recherche depuis le composant Hero
      window.addEventListener('organizationSearch', function(event) {
        currentFilters.searchTerm = event.detail.searchTerm.toLowerCase().trim();
        applyAllFilters();
      });

      // Écouter l'événement de filtrage depuis le composant Filter
      window.addEventListener('organizationFilter', function(event) {
        currentFilters.expertise = event.detail.expertise;
        currentFilters.regions = event.detail.regions;
        currentFilters.types = event.detail.types;
        currentFilters.exactMatch = event.detail.exactMatch || false;
        
        applyAllFilters();
      });
      
      function showOrganizations(organizations) {
        if (organizations.length === 0) {
          organizationsList.classList.add('hidden');
          noResults.classList.remove('hidden');
          organizationCount.textContent = 'Aucune organisation trouvée';
        } else {
          organizationsList.classList.remove('hidden');
          noResults.classList.add('hidden');
          organizationCount.textContent = `Affichage de ${organizations.length} organisation${organizations.length > 1 ? 's' : ''}`;
          
          // Masquer toutes les cartes existantes
          const allCards = organizationsList.querySelectorAll('[data-org-id]');
          allCards.forEach(card => {
            card.style.display = 'none';
          });
          
          // Afficher seulement les cartes filtrées
          organizations.forEach(org => {
            const card = organizationsList.querySelector(`[data-org-id="${org.id}"]`);
            if (card) {
              card.style.display = 'block';
            }
          });
        }
      }
      
      
    // Initialiser le chargement des types d'organisations
      showTypeLoadingStatus();
    });
  </script>
</Layout>