---
import Layout from '../layouts/MainLayout.astro';
import ResourcesHero from '../components/resources/ResourcesHero.astro';
import ResourceCategories from '../components/resources/ResourceCategories.astro';
import FeaturedResources from '../components/resources/FeaturedResources.astro';
import DownloadableResources from '../components/resources/DownloadableResources.astro';
import ResourcesCallToAction from '../components/resources/ResourcesCallToAction.astro';
import { FaBook, FaFileAlt, FaChartBar, FaVideo, FaFilter, FaSearch, FaDownload, FaExternalLinkAlt, FaGraduationCap, FaDatabase, FaClipboardList, FaBookOpen, FaGlobeAfrica } from 'react-icons/fa';
import { getCollection } from 'astro:content';

// Récupérer toutes les ressources
const allResources = await getCollection('ressources');

// Récupérer tous les pays pour les noms
const allCountries = await getCollection('pays');
const countryMap = new Map(allCountries.map(country => [country.data.id, { name: country.data.name, code: country.data.code }]));

// Traiter les ressources avec les noms des pays
const processedResources = allResources.map(resource => ({
  ...resource.data,
  countryName: countryMap.get(resource.data.Pays_id)?.name || 'Non spécifié',
  countryCode: countryMap.get(resource.data.Pays_id)?.code || ''
}));

// Regrouper les ressources par pays
const resourcesByCountry = processedResources.reduce((acc, resource) => {
  const country = resource.countryName;
  if (!acc[country]) {
    acc[country] = {
      countryName: country,
      countryCode: resource.countryCode,
      resources: []
    };
  }
  acc[country].resources.push(resource);
  return acc;
}, {});

// Convertir en tableau et trier par nombre de ressources (décroissant)
const countriesWithResources = Object.values(resourcesByCountry)
  .sort((a, b) => b.resources.length - a.resources.length);

// Types de ressources prédéfinis
const resourceTypes = [
  "Données démographiques",
  "Cadre régional/sous-régional",
  "Rapport observation",
  "Résultats",
  "Constitution",
  "Loi Électorale",
  "Guides"
];

const typeDescriptions = {
  "Données démographiques": "Statistiques de population, électeurs et données démographiques des pays",
  "Cadre régional/sous-régional": "Documents et accords régionaux sur les élections",
  "Rapport observation": "Rapports détaillés sur l'observation des processus électoraux",
  "Résultats": "Résultats officiels et analyses des élections",
  "Constitution": "Textes constitutionnels et amendements relatifs aux élections",
  "Loi Électorale": "Lois et codes électoraux nationaux",
  "Guides": "Guides méthodologiques et manuels d'observation électorale"
};

// Statistiques basées sur les vraies données
const totalResources = processedResources.length;
const uniqueCountriesCount = [...new Set(processedResources.map(r => r.Pays_id).filter(Boolean))].length;
const resourcesWithFiles = processedResources.filter(r => r.fichier && r.fichier.trim() !== '').length;
const recentResources = processedResources.filter(r => r.year && r.year >= 2020).length;

const stats = [
  { 
    icon: FaFileAlt, 
    value: totalResources.toString(), 
    label: "Ressources collectées",
    color: "bg-farafina-primary/10",
    textColor: "text-farafina-primary"
  },
  { 
    icon: FaGlobeAfrica, 
    value: uniqueCountriesCount.toString(), 
    label: "Pays couverts",
    color: "bg-farafina-secondary/10",
    textColor: "text-farafina-secondary"
  },
  { 
    icon: FaDownload, 
    value: resourcesWithFiles.toString(), 
    label: "Fichiers téléchargeables",
    color: "bg-farafina-accent/10",
    textColor: "text-farafina-accent"
  },
  { 
    icon: FaChartBar, 
    value: recentResources.toString(), 
    label: "Ressources récentes (2020+)",
    color: "bg-farafina-blue/10",
    textColor: "text-farafina-blue"
  }
];

// Fonction pour obtenir l'icône correspondant au type
const getTypeIcon = (type: string) => {
  switch (type) {
    case "Données démographiques":
      return FaChartBar;
    case "Cadre régional/sous-régional":
      return FaGraduationCap;
    case "Rapport observation":
      return FaFileAlt;
    case "Résultats":
      return FaDatabase;
    case "Constitution":
      return FaBook;
    case "Loi Électorale":
      return FaBookOpen;
    case "Guides":
      return FaClipboardList;
    default:
      return FaFileAlt;
  }
};

// Catégories de ressources avec descriptions et icônes
const resourceCategories = resourceTypes.map(type => ({
  type,
  count: processedResources.filter(r => r.type === type).length,
  description: typeDescriptions[type] || "Ressources diverses liées aux élections en Afrique",
  icon: getTypeIcon(type)
})).sort((a, b) => b.count - a.count);

// Formatage de date
const formatDate = (year: number) => {
  return year ? year.toString() : 'Non spécifié';
};
---

<Layout title="Centre de Ressources | Observatoire des Élections en Afrique">
  <ResourcesHero />

  <div class="container mx-auto px-4 py-12">
    <!-- Statistiques -->
    <div class="bg-white rounded-xl shadow-md p-6 mb-12">
      <h2 class="text-2xl font-bold text-farafina-dark mb-6">Notre Bibliothèque</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map(stat => (
          <div class={`${stat.color} rounded-lg p-5 text-center`}>
            <div class="flex justify-center mb-3">
              <stat.icon className={`${stat.textColor} text-3xl`} />
            </div>
            <span class={`block text-3xl font-bold ${stat.textColor}`}>{stat.value}</span>
            <span class="text-gray-600">{stat.label}</span>
          </div>
        ))}
      </div>
    </div>

    <!-- Catégories de ressources -->
    <div class="bg-white rounded-xl shadow-md p-6 mb-12">
      <h2 class="text-2xl font-bold text-farafina-dark mb-6">Catégories de Ressources</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {resourceCategories.map(category => (
          <div class="border border-gray-100 rounded-lg p-5 hover:shadow-md transition-shadow cursor-pointer group">
            <div class="flex items-start mb-3">
              <div class="w-12 h-12 rounded-full bg-farafina-primary/10 flex items-center justify-center mr-4 flex-shrink-0 group-hover:bg-farafina-primary/20 transition-colors">
                <category.icon className="text-farafina-primary text-xl" />
              </div>
              <div class="flex-1">
                <div class="flex justify-between items-start">
                  <h3 class="font-semibold text-farafina-dark group-hover:text-farafina-primary transition-colors">
                    {category.type}
                  </h3>
                  <span class="px-2 py-1 bg-farafina-accent/10 text-farafina-accent text-sm rounded-full ml-2">
                    {category.count}
                  </span>
                </div>
                <p class="text-gray-600 text-sm mt-2">{category.description}</p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Ressources regroupées par pays -->
    <div class="bg-white rounded-xl shadow-md p-6 mb-12">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-farafina-dark">Ressources par Pays</h2>
        <div class="flex items-center gap-4">
          <!-- Barre de recherche -->
          <div class="relative">
            <input
              type="text"
              placeholder="Rechercher un pays..."
              id="country-search"
              class="py-2 pl-10 pr-4 rounded-lg border border-gray-200 focus:ring-2 focus:ring-farafina-primary focus:border-transparent"
            />
            <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          </div>
        </div>
      </div>

      <div id="countries-container" class="space-y-6">
        {countriesWithResources.map(country => (
          <div class="country-card border border-gray-100 rounded-lg overflow-hidden" data-country={country.countryName.toLowerCase()}>
            <!-- En-tête du pays -->
            <div class="bg-gradient-to-r from-farafina-primary/5 to-farafina-secondary/5 p-6 border-b border-gray-100">
              <div class="flex items-center justify-between">
                <button 
                  class="toggle-resources flex items-center gap-4 hover:bg-gray-50 rounded-lg p-2 -m-2 transition-colors flex-1 text-left"
                  data-target={`resources-${country.countryName.replace(/\s+/g, '-').toLowerCase()}`}
                >
                  {country.countryCode && (
                    <img
                      src={`https://flagcdn.com/w160/${country.countryCode.toLowerCase()}.webp`}
                      alt={`Drapeau ${country.countryName}`}
                      class="w-12 h-12 object-cover rounded-lg shadow-md"
                    />
                  )}
                  <div>
                    <h3 class="text-xl font-bold text-farafina-dark hover:text-farafina-primary transition-colors">{country.countryName}</h3>
                    <p class="text-gray-600">{country.resources.length} ressource{country.resources.length > 1 ? 's' : ''} disponible{country.resources.length > 1 ? 's' : ''}</p>
                  </div>
                </button>
                <a 
                  href={`/countries/${country.countryCode.toLowerCase()}`}
                  class="px-4 py-2 border border-farafina-primary text-farafina-primary rounded-lg hover:bg-farafina-primary/10 transition-colors text-sm flex-shrink-0"
                >
                  Voir le pays
                </a>
              </div>
            </div>

            <!-- Liste des ressources (initialement cachée) -->
            <div id={`resources-${country.countryName.replace(/\s+/g, '-').toLowerCase()}`} class="resources-list hidden p-6">
              <div class="grid grid-cols-1 lg:grid-cols-2 gap-4">
                {country.resources.map(resource => (
                  <div class="border border-gray-100 rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div class="flex items-start justify-between mb-3">
                      <div class="flex items-center gap-2">
                        <div class="w-8 h-8 rounded-full bg-farafina-primary/10 flex items-center justify-center">
                          <FaFileAlt className="text-farafina-primary text-sm" />
                        </div>
                        <span class="px-2 py-1 bg-farafina-secondary/10 text-farafina-secondary text-xs rounded-full font-medium">
                          {resource.type}
                        </span>
                      </div>
                      <span class="text-xs text-gray-500 font-medium">{formatDate(resource.year)}</span>
                    </div>

                    {/* Titre cliquable */}
                    {resource.fichier ? (
                      <a 
                        href={resource.fichier} 
                        target="_blank"
                        rel="noopener noreferrer"
                        class="block hover:text-farafina-primary transition-colors mb-2"
                      >
                        <h4 class="font-semibold text-farafina-dark text-sm leading-tight line-clamp-2">
                          {resource.title}
                        </h4>
                      </a>
                    ) : (
                      <h4 class="font-semibold text-farafina-dark text-sm leading-tight mb-2 line-clamp-2">
                        {resource.title}
                      </h4>
                    )}

                    <p class="text-gray-600 text-xs mb-3 line-clamp-2">{resource.description}</p>

                    {/* Bouton de téléchargement */}
                    {resource.fichier && (
                      <a 
                        href={resource.fichier} 
                        target="_blank"
                        rel="noopener noreferrer"
                        class="inline-flex items-center px-3 py-1 bg-farafina-accent text-white rounded-md hover:bg-farafina-accent/90 transition-colors text-xs font-medium"
                      >
                        <FaDownload className="mr-1 text-xs" />
                        Télécharger
                      </a>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Appel à l'action -->
    <ResourcesCallToAction />
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Fonctionnalité de recherche de pays
    const searchInput = document.getElementById('country-search');
    const countryCards = document.querySelectorAll('.country-card');

    searchInput?.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();

      countryCards.forEach(card => {
        const countryName = card.dataset.country || '';
        if (countryName.includes(searchTerm)) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    });

    // Fonctionnalité pour afficher/masquer les ressources
    const toggleButtons = document.querySelectorAll('.toggle-resources');

    toggleButtons.forEach(button => {
      button.addEventListener('click', () => {
        const targetId = button.dataset.target;
        const resourcesList = document.getElementById(targetId);

        if (resourcesList) {
          const isHidden = resourcesList.classList.contains('hidden');

          if (isHidden) {
            resourcesList.classList.remove('hidden');
            button.textContent = 'Masquer les ressources';
          } else {
            resourcesList.classList.add('hidden');
            button.textContent = 'Voir les ressources';
          }
        }
      });
    });
  });
</script>