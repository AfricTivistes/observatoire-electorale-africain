---
import Layout from '../../layouts/MainLayout.astro';
import DataPartners from '../../components/elections/DataPartners.astro';
import PageHeader from '../../components/PageHeader.tsx';
import { FaCalendarAlt,FaSearch  } from 'react-icons/fa';
import FilterSidebar from '../../components/common/FilterSidebar';
import ElectionSection from '../../components/elections/ElectionSection';
import YearTimeline from '../../components/elections/YearTimeline';

// Importer la collection elections
import { getCollection } from 'astro:content';

// Récupérer les données des élections depuis la collection
const elections = await getCollection('elections');


// Filtrer les élections à venir et en préparation
const filteredElections = elections
  .filter(election => 
    election.data.statut === "À venir" || 
    election.data.statut === "En préparation"
  )
  .sort((a, b) => 
    new Date(a.data.dateElection).getTime() - new Date(b.data.dateElection).getTime()
  );

// Organiser les élections par statut
const upcomingElections = filteredElections.filter(e => e.data.statut === "À venir");
const preparingElections = filteredElections.filter(e => e.data.statut === "En préparation");


// Régions africaines pour le filtre
const regions = [
  "Afrique du Nord",
  "Afrique de l'Ouest",
  "Afrique Centrale",
  "Afrique de l'Est",
  "Afrique Australe"
];
---

<Layout title="Calendrier Électoral | Observatoire des Élections en Afrique">
  <PageHeader
    title="Calendrier Électoral" 
    subtitle="Consultez les dates des élections en préparation et à venir"
  >
    <FaCalendarAlt className="text-farafina-primary text-3xl" slot="icon" />
  </PageHeader>

  <div class="container mx-auto px-4 py-8">
    <!-- Barre de recherche -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-8">
      <div class="max-w-3xl mx-auto">
        <form id="searchForm" class="relative">
          <input
            type="text"
            id="searchInput"
            placeholder="Rechercher par pays, type d'élection ou année..."
            class="w-full py-3 pl-12 pr-4 rounded-lg border border-gray-200 focus:ring-2 focus:ring-farafina-primary focus:border-transparent"
          />
          <FaSearch className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <button type="submit" class="absolute right-4 top-1/2 transform -translate-y-1/2 bg-farafina-primary text-white px-4 py-1 rounded-md hover:bg-farafina-primary/90 transition-colors">
            Rechercher
          </button>
        </form>
      </div>
    </div>

    <script>
      function normalizeString(str) {
        return str
          .toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '');
      }

      const searchForm = document.getElementById('searchForm');
      const searchInput = document.getElementById('searchInput');
      const electionCards = document.querySelectorAll('.border-l-4');

      function filterResults(query) {
        const searchTerm = normalizeString(query);

        electionCards.forEach(card => {
          const text = normalizeString(card.textContent || '');
          card.style.display = text.includes(searchTerm) ? 'block' : 'none';
        });
      }

      searchForm.addEventListener('submit', (e) => {
        e.preventDefault();
        filterResults(searchInput.value);
      });

      searchInput.addEventListener('input', (e) => {
        filterResults(e.target.value);
      });
    </script>

    <div class="flex flex-col lg:flex-row gap-8">
      <div class="lg:w-1/4">
        <FilterSidebar
          client:load
          sections={[
            {
              title: "Année",
              name: "year",
              options: Array.from(new Set(filteredElections.map(e => new Date(e.data.dateElection).getFullYear())))
                .sort()
                .map(year => ({
                  label: year.toString(),
                  value: year.toString(),
                  count: elections.filter(e => new Date(e.data.dateElection).getFullYear() === year).length
                }))
            },
            {
              title: "Type d'Élection",
              name: "type",
              options: Array.from(new Set(filteredElections.map(e => e.data.typeElection)))
                .sort()
                .map(type => ({
                  label: type,
                  value: type,
                  count: filteredElections.filter(e => e.data.typeElection === type).length
                }))
            },
            {
              title: "Région",
              name: "region",
              options: Array.from(new Set(filteredElections.map(e => e.data.region)))
                .sort()
                .map(region => ({
                  label: region,
                  value: region,
                  count: filteredElections.filter(e => e.data.region === region).length
                }))
            }
          ]}
          onFilterChange={(filters) => {
            console.log('Filtres appliqués:', filters);
          }}
        />
      </div>

      <div class="lg:w-3/4">

        <YearTimeline client:load elections={filteredElections} />

        <ElectionSection 
          client:load
          title="Élections à venir"
          status="À venir"
          icon="calendar"
          elections={upcomingElections}
          colorClass="border-farafina-primary"
        />


        <!-- Mois sans élections >
        <div class="mt-8 bg-gray-50 rounded-lg p-6 border border-gray-200">
          <h3 class="text-lg font-semibold text-farafina-dark mb-4">Mois sans élections programmées</h3>
          <div class="flex flex-wrap gap-2">
            {electionsByMonth.filter(month => month.elections.length === 0).map(month => (
              <span class="px-3 py-1 bg-gray-200 text-gray-700 rounded-full text-sm">
                {month.month} {month.year}
              </span>
            ))}
          </div>
        </div-->
      </div>
    </div>
  </div>
  <DataPartners />
</Layout>